// Node class implementation

    public class Node<T>
    {
        private T data;
        Node<T> next;

        public Node(T item, Node<T> n)
        {
            this.data = item;
            this.next = n;
        }

        public Node<T> Next
        {
            get { return this.next; }
            set { this.next = value; }
        }

        public T Data
        {
            get { return this.data; }
            set { this.data = value; }
        }
    }
    
    
// Linked List class implementation
    public class LinkedList<T>
    {
        private Node<T> head;

        public LinkedList(Node<T> n = null)
        {
            if (this.head == null)
            {
                this.head = n;
            }
        }

        public Node<T> Head
        {
            get { return this.head; }
        } 
      
        // Inserts node at end of the list
        public void InsertNodeAtTail(Node<T> n)
        {
            if ( n == null)
            {
                return;
            }
            
            // List is empty
            if(this.head == null)
            {
                this.head = n;
            }
            else
            {
                // traverse to list end and attach node
                Node<T> Cur = this.head;
                while(Cur.Next != null)
                {
                    Cur = Cur.Next;
                }
                Cur.Next = n;
            }
        }
        
        // Inserts node at start of the list
        public void InsertNodeAtStart(Node<T> n)
        {
           if(n == null)
           {
            return;
           }
           
           // List is empty
           if(this.head == null)
           {
             this.head = n ;
           }
           else
           {
             // reset head
             n.Next = this.head;
             this.head = n ;
           }
         }
         
         // Delete Node from list
         public void DeleteNode(Node<T> n)
         {
            if(n == null)
            {
              return;
            }
            
            Node<T> Prev , Cur ;
            Prev = Cur = this.head;
            do
            {
                // Case 1 : Node to be deleted is head node
                 if( n.Data == this.head )
                 {
                   this.head = Cur.Next;
                   return;
                 }
                 // Case 2 : Node to be deleted is a middle/tail node
                 if ( n.Data == Cur.Data)
                 {
                   prev.Next = Cur.Next;
                   break;
                 }
                 else
                 {
                   Prev = Cur;
                   Cur = Cur.Next;
                 }
            }while(Cur!=null);
        }

        public void PrintNodes()
        {
            if (this.head != null)
            {
                Node<T> Cur = default(Node<T>);
                Console.Writeline();
                for (Cur = this.head; Cur.Next != null; Cur = Cur.Next)
                {
                    Console.Write(Cur.Data.ToString());
                    Console.Write("->");
                }
                Console.Write(Cur.Data.ToString());
            }
        }
    
    }   
