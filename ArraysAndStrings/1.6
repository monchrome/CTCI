// 1.6 Given an image represented by an N*N matrix ,where each pixel in the image is 4 bytes, write a method to rotate
// the matrix by 90 degrees. Can you do this in place?

// Method 1 : in place rotation of N by N  matrix using a layered approach and swapping of cell contents in each layer.
// Note that the # of swaps in each layer is 1 less than N.
// Note the below method does not work for m * n matrix
// Time Complexity : O(n^2)
// Space Complexity : O(1)
public static void RotateMatrixNinetyDegrees(ref int[,] matrix, int n)
{
   if(matrix.Length == 0 )
   {
    throw new ApplicationException("Invalid input");
   }
   
   // Count the number of layers in matrix
   int layers = matrix.Length / 2;
   
   // Loop through each layer
   for(int layer = 0; layer < layers ; layer++ )
   {
      // calculate first and last position within a layer
      int firstpos = layer;
      int lastpos = n - 1 - layer;
      
      // Now iterate through each elemnt in the layer
      for (int i = firstpos  ; i < lastpos ; i++ )
      {
        // Calculate offset of i from first position
        int offset = i - firstpos ;
        
        // Now do the swapping. Swap four ways, first the corners are changed and then
        // the elements inside of the corners
        
        // Capture the topmost left corner
        int temp = matrix[ firstpos, i ];
        
       // Move bottom left cell  to top left cell 
        matrix [ firstpos , i ] = matrix [ lastpos-offset , firstpos ];
        
        // Move bottom right cell to bottom left cell
        matrix [ lastpos-offset , firstpos ] = matrix[ lastpos, lastpos-offset ];
        
        //Move top right cell to bottom right cell
        matrix[ lastpos , lastpos-offset ] = matrix[ i , lastpos ];
        
        //Move temp i.e. original left top cell to right top cell
        matrix[ i , lastpos ] = temp; 
        
      }
   }
}


// Variation : Rotate a m by n matrix by 90 degrees. 

// Example:
// Input:
// 1 2 3
// 4 5 6
// Output:
// 1 4
// 2 5
// 3 6

// Note when a m by n matrix is rotated by 90 degrees, rows become columns and columns become rows.
// Hence a in place 90 degree  rotation of a m by n matrix is not possible
// Assumption m = rowmax, n = colmax
// Time Complexity : O(mn)
// Space Complexity : O(mn)
public static void RotateMbyNMatrixbyNinetyDegrees( ref int[,] inputmatrix, int rowmax , int colmax)
{
   if ( matrix.Length == 0)
   {
    throw new ApplicationException("Invalid Input");
   }
   int [,] rotatedmatrix = new int[colmax, rowmax];
   for(int row = 0 ; row < rowmax ; row++)
   {
      for(int col = 0 ; col <colmax ; col++)
      {
          rotatedmatrix[col , row] = inputmatrix[row , col];
      }
   }
}


// Variation : Rotate a n by n matrix by 180 degrees. Can you do it in place?

//Example : 
// Input :
// 1  2  3  4
// 5  6  7  8
// 9  10 11 12
// 13 14 15 16
// Output:
// 16 15 14 13
// 12 11 10 9
// 8  7  6  5
// 4  3  2  1

// If you observe, during 180 degree rotation of a n by n matrix, the row order and also column order is reversed 
// Time Complexity : O(n^2)
// Space Complexity : O(1)
public static void RotateMatrixbyOneEightyDegrees(ref int[,] matrix, int n)
{
   if((matrix.Length == 0) || (n == 0))
   {
      throw new ApplicationException("Invalid input");
   }
   
   for(int row = 0 ; row < n / 2 ; row++)
   {
      for(int col = 0 ; col < n ; col++)
      {
         int temp =  matrix[row , col];
         //swap rightmost bottom cell with topmost left cell, thus reverse the row order and column order
         matrix[row,col] = matrix[n - 1 - row , n - 1 - col];
         matrix[n - 1 - row , n - 1 - col] = temp;
      }
   }
}
